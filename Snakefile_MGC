sra_acc = config['accession']

rule all:
    input: 
        # expand("{accession}_1.fastq.gz", accession = sra_acc),
        # expand("02_TRIMMED/QC_{accession}_R1.fastq.gz", accession = sra_acc),
        expand("03_ASSEMBLY/METASPADES_{accession}.scaffolds.fasta", accession = sra_acc),
        

rule get_fastq:
    output:
        r1 = "{accession}_1.fastq.gz",
        r2 = "{accession}_2.fastq.gz",
    log:
        "00_LOGS/01__get_fastq.{accession}.log"
    params:
        extra="--skip-technical"
    threads: 12
    wrapper:
        "master/bio/sra-tools/fasterq-dump"

rule adapter_and_quality_trim:
    input:
        r1 = "{accession}_1.fastq.gz",
        r2 = "{accession}_2.fastq.gz",
    output:
        r1 = "02_TRIMMED/QC_{accession}_R1.fastq.gz",
        r2 = "02_TRIMMED/QC_{accession}_R2.fastq.gz",
        # log = SAVE + "00_LOGS/TRIM_MARKED_{sample}.err.txt",
        # stdout = SAVE + "00_LOGS/TRIM_MARKED_{sample}.out.txt"
    log:
        "00_LOGS/02__adapter_and_quality_trim.{accession}.log"
    threads: 12
    params:
        java_ram = config["java_ram"],
        refadpt = config["refadpt"],
        ktrim= config["ktrim"],
        k=config["k"],
        mink=config["mink"],
        hdist=config["hdist"],
        qtrim=config["qtrim"],
        trimq=config["trimq"],
        pigz= config["pigz"],
        unpigz= config["unpigz"],
        overwrite= config["overwrite"],
        ordered= config["ordered"],
        minlen = config["minlen"],
    resources:
        mem_mb=2000
    shell:
        """
        bbduk.sh {params.java_ram} -eoom in1={input.r1} in2={input.r2} out1={output.r1} out2={output.r2} ref={params.refadpt} threads={threads} ktrim={params.ktrim} k={params.k} mink={params.mink} hdist={params.hdist} tpe tbo qtrim={params.qtrim} trimq={params.trimq} pigz={params.pigz} unpigz={params.unpigz} overwrite={params.overwrite} ordered={params.ordered} minlen={params.minlen} 2>&1 > {log}
        """

# This rule runs, but is inefficient because metaspades only utilizes one thread.
# Will try to debug later, probably needs a pull request to the github repo.
# rule run_metaspades:
#     input:
#         reads=["02_TRIMMED/QC_{accession}_R1.fastq.gz",
#                "02_TRIMMED/QC_{accession}_R2.fastq.gz"],
#     output:
#         contigs="03_ASSEMBLY/{accession}.contigs.fasta",
#         scaffolds="03_ASSEMBLY/{accession}.scaffolds.fasta",
#         # dir=directory("03_ASSEMBLY/intermediate_files"),
#     params:
#         k="auto",
#         extra="--only-assembler",
#     log:
#         "00_LOGS/03__metaspades.{accession}.log",
#     threads: 12
#     resources:
#         mem_mem=64000,
#         # time=60 * 24,
#     wrapper:
#         "master/bio/spades/metaspades"

rule run_metaspades:
    input:
        r1 = "02_TRIMMED/QC_{accession}_R1.fastq.gz",
        r2 = "02_TRIMMED/QC_{accession}_R2.fastq.gz",
    output:
        contigs = "03_ASSEMBLY/METASPADES_{accession}.contigs.fasta",
        scaffolds = "03_ASSEMBLY/METASPADES_{accession}.scaffolds.fasta",
    params:
        accession = "{accession}",
        outdir = "03_ASSEMBLY",
        k = config['klist'],
        skip_ec = config["skip_ec"],
        mem_gb = config["mem_gb"],
    log:
        "00_LOGS/03__metaspades.{accession}.log"
    threads: config["all_cpu"]
    # resources:
    #     mem_mb = config["all_mem_mb"]
    shell:
        """
        metaspades.py -1 {input.r1} -2 {input.r2} -o {params.outdir} -t {threads} -k {params.k} -m {params.mem_gb} {params.skip_ec} 2>&1 > {log}
        sed 's/^>/>{params.accession}__/' {params.outdir}/contigs.fasta > {output.contigs}
        sed 's/^>/>{params.accession}__/' {params.outdir}/scaffolds.fasta > {output.scaffolds}
        """